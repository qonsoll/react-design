@import '../../../scss/config/breakpoints';
@import '../../../scss/config/gutters';
@import '../../../scss/config/container-max-width';

.container {
  display: block;
  margin-left: auto;
  margin-right: auto;
  width: 100%;
  box-sizing: border-box;
  /* 
    .bounded will add max-width for .container based
    on mediaQuery
  */
  &.bounded {
    @each $breakpoint, $value in $breakpoints {
      @media (min-width: $value) {
        max-width: map-get($container-max-width, $breakpoint);
      }
    }
  }
  /*
    .container-{breakpoint} will help to set max-width to 
    the container (without mediaQuery)
  */
  @each $breakpoint, $value in $breakpoints {
    &.container-#{$breakpoint} {
      max-width: map-get($container-max-width, $breakpoint) !important;
    }
  }
  /*
    .gutters will add space from the left and right sides
    (bootstrap like)
  */
  &.gutters {
    padding-left: $gutter-default;
    padding-right: $gutter-default;
    @each $breakpoint, $value in $breakpoints {
      @media (min-width: $value) {
        $gutterVariable: map-get($gutters, $breakpoint);
        padding-left: $gutterVariable;
        padding-right: $gutterVariable;
      }
    }
    /*
      Styles below will add negative margins to the row if container 
      has gutters
    */
    .row {
      margin-left: #{$negative-gutter-default};
      margin-right: #{$negative-gutter-default};
      /*
        Negative margins are dynamic (mediaQuery)
      */
      @each $breakpoint, $value in $breakpoints {
        @media (min-width: $value) {
          margin-left: #{map-get($negative-gutters, $breakpoint)};
          margin-right: #{map-get($negative-gutters, $breakpoint)};
        }
      }
    }
    /*
      There are possibility to remove dynamic gutters and make
      them static
    */
    &.static-gutters {
      padding-left: $gutter-default !important;
      padding-right: $gutter-default !important;
      .row {
        margin-left: #{$negative-gutter-default} !important;
        margin-right: #{$negative-gutter-default} !important;
      }
    }
  }
  /*
    .gutter-default will add static gutters to the 
    container
  */
  &.gutter-default {
    padding-left: $gutter-default;
    padding-right: $gutter-default;
  }
  /*
    .gutter-{breakpoint} provides possibility to change
    gutter size (without mediaQuery rule)
  */
  @each $breakpoint, $value in $breakpoints {
    &.gutter-#{$breakpoint} {
      $gutterVariable: map-get($gutters, $breakpoint);;
      padding-left: $gutterVariable !important;
      padding-right: $gutterVariable !important;
    }
  }
}